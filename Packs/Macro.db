{"name":"Change Token Vision","permission":{"default":0,"3PybLQ2PCSDWfBMy":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.ZVogvI1lrUBkRwTd"}},"scope":"global","command":"// A macro for the Foundry virtual tabletop that lets a user configure their token's vision and lighting settings. This script is taken from Sky's foundry repo here: https://github.com/Sky-Captain-13/foundry/blob/master/scriptMacros/tokenVision.js.\n\nlet applyChanges = false;\nnew Dialog({\n  title: `Token Vision Configuration`,\n  content: `\n    <form>\n      <div class=\"form-group\">\n        <label>Vision Type:</label>\n        <select id=\"vision-type\" name=\"vision-type\">\n          <option value=\"nochange\">Pas de changement</option>\n          <option value=\"dim0\">Soi-meme</option>\n          <option value=\"dim9\">Darkvision (9 m)</option>\n          <option value=\"dim18\">Darkvision (18 m)</option>\n          <option value=\"dim27\">Darkvision (27 m)</option>\n          <option value=\"dim36\">Darkvision (36 m)</option>\n          <option value=\"dim45\">Darkvision (45 m)</option>\n          <option value=\"dim54\">Darkvision (54 m)</option>\n          <option value=\"bright36\">Devil's Sight (Warlock)</option>\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Light Source:</label>\n        <select id=\"light-source\" name=\"light-source\">\n          <option value=\"nochange\">Pas de changement</option>\n          <option value=\"none\">Aucun</option>\n          <option value=\"candle\">Bougie</option>\n          <option value=\"lamp\">Lampe</option>\n          <option value=\"bullseye\">Lanterne (Bullseye)</option>\n          <option value=\"hooded-dim\">Lanterne (Capuche - Faible)</option>\n          <option value=\"hooded-bright\">Lanterne (Capuche - Forte)</option>\n          <option value=\"light\">Lumi√®re (Sort mineur)</option>\n          <option value=\"torch\">Torche</option>\n          <option value=\"moon-touched\">Moon-Touched</option>\n        </select>\n      </div>\n    </form>\n    `,\n  buttons: {\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Apply Changes`,\n      callback: () => applyChanges = true\n    },\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Cancel Changes`\n    },\n  },\n  default: \"yes\",\n  close: html => {\n    if (applyChanges) {\n      for ( let token of canvas.tokens.controlled ) {\n        let visionType = html.find('[name=\"vision-type\"]')[0].value || \"none\";\n        let lightSource = html.find('[name=\"light-source\"]')[0].value || \"none\";\n        let dimSight = 0;\n        let brightSight = 0;\n        let dimLight = 0;\n        let brightLight = 0;\n        let lightAngle = 360;\n        let lockRotation = token.data.lockRotation;\n        let lightAnimation = token.data.lightAnimation;\n        let lightAlpha = token.data.lightAlpha;\n        let lightColor = token.data.lightColor;\n        const colorFire = \"#f8c377\";\n        const colorWhite = \"#ffffff\";\n        const colorMoonGlow = \"#f4f1c9\";\n        // Get Vision Type Values\n        switch (visionType) {\n          case \"dim0\":\n            dimSight = 0;\n            brightSight = 0;\n            break;\n          case \"dim9\":\n            dimSight = 9;\n            brightSight = 0;\n            break;\n          case \"dim18\":\n            dimSight = 18;\n            brightSight = 0;\n            break;\n          case \"dim27\":\n            dimSight = 27;\n            brightSight = 0;\n            break;\n          case \"dim36\":\n            dimSight = 36;\n            brightSight = 0;\n            break;\n          case \"dim45\":\n            dimSight = 45;\n            brightSight = 0;\n            break;\n          case \"dim54\":\n            dimSight = 54;\n            brightSight = 0;\n            break;\n          case \"bright36\":\n            dimSight = 0;\n            brightSight= 36;\n            break;\n          case \"nochange\":\n          default:\n            dimSight = token.data.dimSight;\n            brightSight = token.data.brightSight;\n        }\n        // Get Light Source Values\n        switch (lightSource) {\n          case \"none\":\n            dimLight = 0;\n            brightLight = 0;\n            lightAnimation = {type: \"none\"};\n            break;\n          case \"candle\":\n            dimLight = 3;\n            brightLight = 1.5;\n            lightAnimation = {type: \"torch\", speed: 2, intensity: 2};\n            lightColor = colorFire;\n            lightAlpha = 0.15;\n            break;\n          case \"lamp\":\n            dimLight = 13;\n            brightLight = 4.5;\n            lightAnimation = {type: \"torch\", speed: 2, intensity: 2};\n            lightColor = colorFire;\n            lightAlpha = 0.15;\n            break;\n          case \"bullseye\":\n            dimLight = 36;\n            brightLight = 18;\n            lockRotation = false;\n            lightAngle = 52.5;\n            lightAnimation = {type: \"torch\", speed: 2, intensity: 2};\n            lightColor = colorFire;\n            lightAlpha = 0.15;\n            break;\n          case \"hooded-dim\":\n            dimLight = 1.5;\n            brightLight = 0;\n            lightAnimation = {type: \"torch\", speed: 2, intensity: 2};\n            lightColor = colorFire;\n            lightAlpha = 0.15;\n            break;\n          case \"hooded-bright\":\n            dimLight = 18;\n            brightLight = 9;\n            lightAnimation = {type: \"torch\", speed: 2, intensity: 2};\n            lightColor = colorFire;\n            lightAlpha = 0.15;\n            break;\n          case \"light\":\n            dimLight = 12;\n            brightLight = 6;\n            lightAnimation = {type: \"none\"};\n            lightColor = colorWhite;\n            lightAlpha = 0.15;\n            break;\n          case \"torch\":\n            dimLight = 12;\n            brightLight = 6;\n            lightAnimation = {type: \"torch\", speed: 2, intensity: 2};\n            lightColor = colorFire;\n            lightAlpha = 0.15;\n            break;\n          case \"moon-touched\":\n            dimLight = 9;\n            brightLight = 4.5;\n            lightAnimation = {type: \"none\"};\n            lightColor = colorMoonGlow;\n            break;\n          case \"nochange\":\n          default:\n            dimLight = token.data.dimLight;\n            brightLight = token.data.brightLight;\n            lightAngle = token.data.lightAngle;\n            lockRotation = token.data.lockRotation;\n            lightAnimation = token.data.lightAnimation;\n            lightAlpha = token.data.lightAlpha;\n            lightColor = token.data.lightColor;\n        }\n        // Update Token\n        console.log(token);\n        token.update({\n          vision: true,\n          dimSight: dimSight,\n          brightSight: brightSight,\n          dimLight: dimLight,\n          brightLight:  brightLight,\n          lightAngle: lightAngle,\n          lockRotation: lockRotation,\n          lightAnimation: lightAnimation,\n          lightAlpha: lightAlpha,\n          lightColor: lightColor\n        });\n      }\n    }\n  }\n}).render(true);","author":"3PybLQ2PCSDWfBMy","img":"https://i.imgur.com/EExmGiV.png","actorIds":[],"_id":"60WS2qRwz5trij3I"}
{"name":"WildShape Macro","permission":{"default":0,"3PybLQ2PCSDWfBMy":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.QqyOBObsu16PrHbt"}},"scope":"global","command":"// Name of the folder in which the beasts are located\n let beastsFolder = \"Metamorphose\"\n\n // Name of your WildShape Effect\n let wildShapeEffectName = \"Metamorphose Effect\"\n\n /////////////////////////////////////////////////////\n\n // Declare the target\n let target = canvas.tokens.controlled[0]\n\n // Get the ID of your the actual target (current Actor Form)\n let currentFormActorId = target.actor.data._id\n\n // Declare my WildShape transformation function\n let wildShapeTransform = async function (actorOriginalForm, actorNewFormId) {\n\n     // Image's Token associated with the original actor form\n     let actorOriginalFormImagePath = actorOriginalForm.data.token.img\n\n     // Get the New Form Actor\n     let actorNewForm = game.actors.get(actorNewFormId)\n     // Set the token rotation to default value\n     actorNewForm._data.token.rotation = 0\n     // Image's Token associated with the new actor form\n     let actorNewFormImagePath = actorNewForm.data.token.img\n\n     // Get the New Shape Actor Name\n     let actorNewShapeName = actorOriginalForm.data.name + ' (' + actorNewForm.data.name + ')'\n\n     // Declare the polymorph function\n     let actorPolymorphism = async function () {\n         // For actorNewForm, the ratio's Token scale should be the same of the original form\n         actor.transformInto(actorNewForm, {\n             keepPhysical: true,\n             keepMental: true,\n             mergeSaves: true,\n             mergeSkills: true,\n             keepBio: true,\n             keepClass: true,\n             keepVision: true,\n         })\n     }\n\n     // Declare the WildShape Effect\n     let applyWildShapeEffect = {\n         label: wildShapeEffectName,\n         icon: \"systems/dnd5e/icons/skills/green_13.jpg\",\n         changes: [{\n             \"key\": \"macro.execute\",\n             \"mode\": 1,\n             \"value\": `\"WildShape Effect Macro\"` + `\"${currentFormActorId}\"` + `\"${actorOriginalFormImagePath}\"` + `\"${actorNewFormId}\"` + `\"${actorNewShapeName}\"`,\n             \"priority\": \"20\"\n         }],\n         duration: {\n             \"seconds\": 7200,\n         }\n     }\n\n     let transferDAEEffects = async function (actorOriginalForm) {\n         if (!actor.data.flags.dnd5e?.isPolymorphed) {\n             let actorNewShape = game.actors.get(actorNewFormId)\n             let actorOriginalFormEffectsData = actorOriginalForm.effects.map(ef => ef.data)\n             await actorNewShape.createEmbeddedEntity(\"ActiveEffect\", actorOriginalFormEffectsData)\n         } else {\n             let actorNewShape = game.actors.get(actorNewFormId)\n             let actorNewShapeEffectsData = actorNewShape.effects.map(ef => ef.data)\n             await actorOriginalForm.createEmbeddedEntity(\"ActiveEffect\", actorNewShapeEffectsData)\n         }\n     }\n\n     // Declare the Remove DAE Effects function\n     let removeDAEEffects = async function () {\n         try {\n             let mapOriginalActorEffects = actorOriginalForm.effects.map(i => i.data.label)\n             for (let effect in mapOriginalActorEffects) {\n                 let actorOriginalFormEffects = actorOriginalForm.effects.find(i => i.data.label === mapOriginalActorEffects[effect])\n                 actorOriginalFormEffects.delete()\n             }\n         }\n         catch (error) {\n             console.log('DnD5e-WildShape | Tried to remove an effect but no more effects to remove')\n         }\n\n     }\n\n     // Declare the delay variable to adjust with animation\n     const delay = ms => new Promise(resolve => setTimeout(resolve, ms))\n\n     // If not already polymorphed, launch startAnimation function\n     if (!actor.data.flags.dnd5e?.isPolymorphed) {\n         let paramsStart = [{\n             filterType: \"polymorph\",\n             filterId: \"polymorphToNewForm\",\n             type: 6,\n             padding: 70,\n             magnify: 1,\n             imagePath: actorNewFormImagePath,\n             animated:\n             {\n                 progress:\n                 {\n                     active: true,\n                     animType: \"halfCosOscillation\",\n                     val1: 0,\n                     val2: 100,\n                     loops: 1,\n                     loopDuration: 1000\n                 }\n             },\n             autoDisable: false,\n             autoDestroy: false\n         }]\n\n         target.update({\n             \"width\": actorNewForm.data.token.width,\n             \"height\": actorNewForm.data.token.height\n         })\n         async function startAnimation() {\n             await token.TMFXhasFilterId(\"polymorphToNewForm\")\n             await TokenMagic.addUpdateFilters(target, paramsStart)\n             await delay(1100)\n             await actorPolymorphism()\n             await delay(500)\n             await token.TMFXdeleteFilters(\"polymorphToNewForm\")\n             let actorNewShape = game.actors.getName(actorNewShapeName)\n             await actorNewShape.createEmbeddedEntity(\"ActiveEffect\", applyWildShapeEffect)\n             await removeDAEEffects().catch(err => console.error(err))\n         }\n         startAnimation()\n         // If actor is polymorphed, launch backAnimation function\n     } else {\n         // Image's Token associated with the original actor form\n         actorOriginalFormImagePath = actorOriginalForm.data.token.img\n         let paramsBack =\n             [{\n                 filterType: \"polymorph\",\n                 filterId: \"polymorphToOriginalForm\",\n                 type: 6,\n                 padding: 70,\n                 magnify: 1,\n                 imagePath: actorOriginalFormImagePath,\n                 animated:\n                 {\n                     progress:\n                     {\n                         active: true,\n                         animType: \"halfCosOscillation\",\n                         val1: 0,\n                         val2: 100,\n                         loops: 1,\n                         loopDuration: 1000\n                     }\n                 }\n             }]\n         target.update({\n             \"width\": actorOriginalForm.data.token.width,\n             \"height\": actorOriginalForm.data.token.height\n         })\n         async function backAnimation() {\n             token.TMFXhasFilterId(\"polymorphToOriginalForm\")\n             token.TMFXaddUpdateFilters(paramsBack)\n             await delay(1100)\n             await transferDAEEffects(actorOriginalForm)\n             await actor.revertOriginalForm()\n             await token.TMFXdeleteFilters(\"polymorphToOriginalForm\")\n             actorOriginalForm.effects.find(i => i.data.label === wildShapeEffectName).delete()\n         }\n         backAnimation()\n     }\n }\n\n // If not already polymorphed, display the dialog box\n if (!actor.data.flags.dnd5e?.isPolymorphed) {\n     let actorOriginalForm = game.actors.get(currentFormActorId)\n     let selectBeasts = '<form><div class=\"form-group\"><label>Choisis ta forme: </label><select id=\"wildShapeBeasts\">';\n     game.folders.getName(beastsFolder).content.forEach(function (beast) {\n         let optBeast = '<option value=\"' + beast.data._id + '\">' + beast.data.name + '</option>';\n         selectBeasts += optBeast;\n     });\n     selectBeasts += '</select></div></form>'\n     new Dialog({\n         title: \"DnD5e-WildShape\",\n         content: selectBeasts,\n         buttons: {\n             yes: {\n                 icon: '<i class=\"fas fa-check\"></i>',\n                 label: \"Graou!\",\n                 callback: () => {\n                     // Get the New Form Actor ID\n                     let actorNewFormId = $('#wildShapeBeasts').find(\":selected\").val();\n                     wildShapeTransform(actorOriginalForm, actorNewFormId);\n                 }\n             }\n         }\n     }).render(true);\n     // Else, launch the WildShape transformation function\n } else {\n     let actorOriginalId = game.actors.get(currentFormActorId)._data.flags.dnd5e.originalActor\n     let actorOriginalForm = game.actors.get(actorOriginalId)\n     let actorNewFormId = _token.actor.data._id\n     wildShapeTransform(actorOriginalForm, actorNewFormId);\n }","author":"3PybLQ2PCSDWfBMy","img":"https://static.wikia.nocookie.net/wowwiki/images/1/13/Ability_druid_flightform.png","actorIds":[],"_id":"Q2zZI99HeqaqTCN6"}
{"name":"WildShape Effect Macro","permission":{"default":0,"3PybLQ2PCSDWfBMy":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.xCFio8uQ8iZ98Zxe"}},"scope":"global","command":"let target = canvas.tokens.controlled[0]\nlet actorOriginalFormId = args[1]\nlet actorOriginalForm = game.actors.get(actorOriginalFormId)\nlet actorOriginalFormName = actorOriginalForm.data.name\nlet actorOriginalFormImagePath = args[2]\nlet actorNewForm = game.actors.get(args[3])\nlet actorNewShapeName = args[4]\nlet transferDAEEffects = async function () {\n    if (actor.data.flags.dnd5e?.isPolymorphed) {\n        let actorNewShape = game.actors.getName(actorNewShapeName)\n        let actorNewShapeEffectsData = actorNewShape.effects.map(ef => ef.data)\n        await actorOriginalForm.createEmbeddedEntity(\"ActiveEffect\", actorNewShapeEffectsData)\n    }\n}\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms))\nif (actor.data.flags.dnd5e?.isPolymorphed && args[0] === \"off\") {\n    let paramsBack =\n        [{\n            filterType: \"polymorph\",\n            filterId: \"polymorphToOriginalForm\",\n            type: 6,\n            padding: 70,\n            magnify: 1,\n            imagePath: actorOriginalFormImagePath,\n            animated:\n            {\n                progress:\n                {\n                    active: true,\n                    animType: \"halfCosOscillation\",\n                    val1: 0,\n                    val2: 100,\n                    loops: 1,\n                    loopDuration: 1000\n                }\n            }\n        }]\n    target.update({\n        \"width\": actorOriginalForm.data.token.width,\n        \"height\": actorOriginalForm.data.token.height\n    })\n    async function backAnimation() {\n        token.TMFXhasFilterId(\"polymorphToOriginalForm\")\n        token.TMFXaddUpdateFilters(paramsBack)\n        await delay(1100)\n        transferDAEEffects()\n        await delay(100)\n        actor.revertOriginalForm()\n        await delay(100)\n        token.TMFXdeleteFilters(\"polymorphToOriginalForm\")\n    }\n    backAnimation()\n}","author":"3PybLQ2PCSDWfBMy","img":"icons/svg/pawprint.svg","actorIds":[],"_id":"V0gpRmebraa2x0Hf"}
